name: DockerHub

on: [push]

jobs:
  ubuntu:
    name: Ubuntu
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - uses: azure/docker-login@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      - name: Ubuntu Bionic
        run: |
          docker build -f ubuntu/bionic/Dockerfile -t ${{ secrets.DOCKER_HUB_USERNAME }}/ubuntu:bionic ubuntu/bionic/
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/ubuntu:bionic
  alpine:
    name: Alpine
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - uses: azure/docker-login@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      - name: Alpine
        run: |
          docker build -f alpine/3.12/Dockerfile -t ${{ secrets.DOCKER_HUB_USERNAME }}/alpine:3.12 alpine/3.12/
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/alpine:3.12
  mysql-client:
    name: MySQL Client
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - uses: azure/docker-login@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      - name: MySQL Client
        run: |
          docker build -f mysql-client/1.1/Dockerfile -t ${{ secrets.DOCKER_HUB_USERNAME }}/mysql-client:1.1 mysql-client/1.1/
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/mysql-client:1.1
  nginx:
    name: NGINX
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - uses: azure/docker-login@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      - name: NGINX 1.7
        run: |
          docker build -f nginx/1.7/Dockerfile -t ${{ secrets.DOCKER_HUB_USERNAME }}/nginx:1.7 nginx/1.7/
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/nginx:1.7
      - name: NGINX 1.19
        run: |
          docker build -f nginx/1.19/Dockerfile -t ${{ secrets.DOCKER_HUB_USERNAME }}/nginx:1.19 nginx/1.19/
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/nginx:1.19
  mysql:
    name: MySQL
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - uses: azure/docker-login@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      - name: MySQL 8.0 local
        run: |
          docker build -f mysql/8.0/Dockerfile.local -t ${{ secrets.DOCKER_HUB_USERNAME }}/mysql:8.0-local mysql/8.0/
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/mysql:8.0-local
      - name: MySQL 8.0 production
        run: |
          docker build -f mysql/8.0/Dockerfile.production -t ${{ secrets.DOCKER_HUB_USERNAME }}/mysql:8.0-production mysql/8.0/
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/mysql:8.0-production
      - name: MySQL 5.7 local
        run: |
          docker build -f mysql/5.7/Dockerfile.local -t ${{ secrets.DOCKER_HUB_USERNAME }}/mysql:5.7-local mysql/5.7/
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/mysql:5.7-local
      - name: MySQL 5.7 production
        run: |
          docker build -f mysql/5.7/Dockerfile.production -t ${{ secrets.DOCKER_HUB_USERNAME }}/mysql:5.7-production mysql/5.7/
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/mysql:5.7-production
      - name: MySQL 5.6 local
        run: |
          docker build -f mysql/5.6/Dockerfile.local -t ${{ secrets.DOCKER_HUB_USERNAME }}/mysql:5.6-local mysql/5.6/
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/mysql:5.6-local
      - name: MySQL 5.6 production
        run: |
          docker build -f mysql/5.6/Dockerfile.production -t ${{ secrets.DOCKER_HUB_USERNAME }}/mysql:5.6-production mysql/5.6/
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/mysql:5.6-production
  php:
    name: PHP
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - uses: azure/docker-login@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      - name: PHP 7.2 base
        run: |
          docker build -f php/7.2/Dockerfile -t ${{ secrets.DOCKER_HUB_USERNAME }}/php:7.2 php/7.2/
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/php:7.2
      - name: PHP 7.2 local
        run: |
          docker build -f php/7.2/Dockerfile.local -t ${{ secrets.DOCKER_HUB_USERNAME }}/php:7.2-local php/7.2/
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/php:7.2-local
      - name: PHP 7.2 production
        run: |
          docker build -f php/7.2/Dockerfile.production -t ${{ secrets.DOCKER_HUB_USERNAME }}/php:7.2-production php/7.2/
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/php:7.2-production
      - name: PHP 7.3 base
        run: |
          docker build -f php/7.3/Dockerfile -t ${{ secrets.DOCKER_HUB_USERNAME }}/php:7.3 php/7.3/
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/php:7.3
      - name: PHP 7.3 local
        run: |
          docker build -f php/7.3/Dockerfile.local -t ${{ secrets.DOCKER_HUB_USERNAME }}/php:7.3-local php/7.3/
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/php:7.3-local
      - name: PHP 7.3 production
        run: |
          docker build -f php/7.3/Dockerfile.production -t ${{ secrets.DOCKER_HUB_USERNAME }}/php:7.3-production php/7.3/
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/php:7.3-production
      - name: PHP 7.4 base
        run: |
          docker build -f php/7.4/Dockerfile -t ${{ secrets.DOCKER_HUB_USERNAME }}/php:7.4 php/7.4/
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/php:7.4
      - name: PHP 7.4 local
        run: |
          docker build -f php/7.4/Dockerfile.local -t ${{ secrets.DOCKER_HUB_USERNAME }}/php:7.4-local php/7.4/
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/php:7.4-local
      - name: PHP 7.4 production
        run: |
          docker build -f php/7.4/Dockerfile.production -t ${{ secrets.DOCKER_HUB_USERNAME }}/php:7.4-production php/7.4/
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/php:7.4-production
  elasticsearch:
    name: Elasticsearch
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - uses: azure/docker-login@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      - name: Elasticsearch 7.4
        run: |
          docker build -f elasticsearch/7.4/Dockerfile -t ${{ secrets.DOCKER_HUB_USERNAME }}/elasticsearch:7.4 elasticsearch/7.4/
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/elasticsearch:7.4
      - name: Elasticsearch 7.6
        run: |
          docker build -f elasticsearch/7.6/Dockerfile -t ${{ secrets.DOCKER_HUB_USERNAME }}/elasticsearch:7.6 elasticsearch/7.6/
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/elasticsearch:7.6
  ossutil:
    name: OSSUtil
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - uses: azure/docker-login@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      - name: OSSUTIL 1.7.0
        run: |
          docker build -f ossutil/1.7.0/Dockerfile -t ${{ secrets.DOCKER_HUB_USERNAME }}/ossutil:1.7.0 ossutil/1.7.0/
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/ossutil:1.7.0
  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [ubuntu, mysql-client, nginx, mysql, php, elasticsearch, ossutil]
    if: always()
    steps:
      - name: Feishu Notify
        uses: foxundermoon/feishu-action@v1
        if: always()
        with:
          url: ${{ secrets.FEISHU_BOT_WEBHOOK }}
          title: Docker Images Auto BuilKd
          text: |
            repository: ${{ github.repository }}
            committer: ${{ github.actor }}
            compare: ${{ github.event.compare }}
            job status: ${{ job.status }}
